#!/bin/csh -f

# Linux: -c = do not get file if already done.
if (`uname` == "Linux") then
	set mwget = "wget -c -nv --no-check-certificate"
# Mac: makes it quite and show nice progress
else if (`uname` == "Darwin") then
	set mwget = "wget -qc --show-progress --no-check-certificate"
endif


if($1 == "release"|| $1 == "copt" || $1 == "log"  || $1 == "repo" || $1 == "dir" || $1 == "cmakev" ||  $1 == "logFile" ||  $1 == "xLog" || $1 == "logFileS" || $1 == "logStart" || $1 == "logEnd"  ||  $1 == "logTime" || $1 == "removeAndCreate" || $1 == "getAndUnpack" ||  $1 == "download" ||  $1 == "getAndUnpackTo" || $1 == "installLog") then
	goto $1
endif


# Release
release:
	set release  = (`../ce/osrelease.py`)
	# overwriting OSRELEASE if user want to
	#if($OSRELEASE != $release) then
	#	set release = $OSRELEASE
	#endif
	echo $release
if($1 == "release") exit


# Multithread compilation
copt:
	set opt   = ""
	set ncpu = `getconf _NPROCESSORS_ONLN`
	set opt = " -j"$ncpu" "

	# Temp: forcing max 10 processes as the scons system
	# checks independently that the libraries exist
	# Feb 2020: looks like this is not needed anymore
	#if($ncpu > 10) then
	#	set opt = " -j10"
	#endif
	echo $opt
if($1 == "copt") exit


# Log to screen
log:
	echo
	echo " ### Package: "$2" ###"
	echo
	echo " > Version:                 " $3
	echo " > Filename:                " $4
	echo " > Release:                 " $5
	echo " > Multithread Compilation: " $6
	echo
if($1 == "log") exit


# Web Directory where all the sources are located
repo:
	echo  "https://www.jlab.org/12gev_phys/packages/sources"
if($1 == "repo") exit


# JLAB FTP Directory where all the sources are located
dir:
	echo  "/u/group/12gev_phys/www/packages/sources"
if($1 == "dir") exit


# check the cmake version
# Issue warning if it's not >= 3.3
cmakev:
 	set cmake_major     = `cmake --version | head -1 | awk '{print $3}' | awk -F- '{print $1}' | awk -F. '{print $1}'`
 	set cmake_minor     = `cmake --version | head -1 | awk '{print $3}' | awk -F- '{print $1}' | awk -F. '{print $2}'`
 	if( ($cmake_major < 3) || ($cmake_major == 3 && $cmake_minor < 3)) then
		echo cmake version is $cmake_version, 3.3 or higher is needed
	else
		echo OK
	endif
if($1 == "cmakev") exit


# log file for each system
logFile:
	if($2 == "clhep") then
		echo "$CLHEP_BASE_DIR/build_log"
	else if($2 == "xercesc") then
		echo "$XERCESCROOT/build_log"
	else if($2 == "geant4")   then
		echo "$G4INSTALL/build_log"
	else if($2 == "ccdb")     then
		echo "$CCDB_HOME/build_log"
	else if($2 == "evio")     then
		echo "$EVIO/build_log"
	else if($2 == "mlibrary") then
		echo "$MLIBRARY/build_log"
	else if($2 == "glibrary") then
		echo "$GLIBRARY/build_log"
	else if($2 == "gemc")     then
		echo "$GEMC/build_log"
	else if($2 == "root")     then
		echo "$ROOTSYS/build_log"
	else if($2 == "banks")    then
		echo "$JLAB_SOFTWARE/banks/$BANKS_VERSION/build_log"
	else if($2 == "jana") then
		echo "$JANA_HOME/build_log"
	endif
if($1 == "logFile") exit

# log file for each system
xLog:

	if ($?DISPLAY) then      # parentheses not strictly needed in this simple case
		echo " > Starting xterm showing compilation log"
		if($2 == "clhep") then
			xterm -geometry 240x60+100+100 -e tail -f $CLHEP_BASE_DIR/build_log &
		else if($2 == "xercesc") then
			xterm -geometry 240x60+100+100 -e tail -f $XERCESCROOT/build_log &
		else if($2 == "geant4")   then
			xterm -geometry 240x60+100+100 -e tail -f $G4INSTALL/build_log &
		else if($2 == "ccdb")     then
			xterm -geometry 240x60+100+100 -e tail -f $CCDB_HOME/build_log &
		else if($2 == "evio")     then
			xterm -geometry 240x60+100+100 -e tail -f $EVIO/build_log &
		else if($2 == "mlibrary") then
			xterm -geometry 240x60+100+100 -e tail -f $MLIBRARY/build_log &
		else if($2 == "glibrary") then
			xterm -geometry 240x60+100+100 -e tail -f $GLIBRARY/build_log &
		else if($2 == "gemc")     then
			xterm -geometry 240x60+100+100 -e tail -f $GEMC/build_log &
		else if($2 == "root")     then
			xterm -geometry 240x60+100+100 -e tail -f $ROOTSYS/build_log &
		else if($2 == "banks")    then
			xterm -geometry 240x60+100+100 -e tail -f $JLAB_SOFTWARE/banks/$BANKS_VERSION/build_log &
		else if($2 == "jana") then
			xterm -geometry 240x60+100+100 -e tail -f $JANA_HOME/build_log &
		endif
	endif
if($1 == "xLog") exit


# log file for each system - with env variable as path
logFileS:
	if($2 == "clhep") then
		echo \$CLHEP_BASE_DIR/"build_log"
	else if($2 == "xercesc") then
		echo \$XERCESCROOT/"build_log"
	else if($2 == "geant4")   then
		echo \$G4INSTALL/"build_log"
	else if($2 == "ccdb")     then
		echo \$CCDB_HOME/"build_log"
	else if($2 == "evio")     then
		echo \$EVIO/"build_log"
	else if($2 == "mlibrary") then
		echo \$MLIBRARY/"build_log"
	else if($2 == "glibrary") then
		echo \$GLIBRARY/"build_log"
	else if($2 == "gemc")     then
		echo \$GEMC/"build_log"
	else if($2 == "root")     then
		echo \$ROOTSYS/"build_log"
	else if($2 == "banks")    then
		echo \$JLAB_SOFTWARE/"banks/$BANKS_VERSION/build_log"
	else if($2 == "jana") then
		echo \$JANA_HOME/"build_log"
	endif
if($1 == "logFileS") exit


# log start message
logStart:
	echo " > Source compilation started on --- " `date` > $2
	echo " > Source compilation started on --- " `date` 
	echo " > Compiling source. Log will be in" $3
	echo " > Compilation Log " > $2
if($1 == "logStart") exit


# log end message
logEnd:
	echo " > Source compilation ended on --- " `date` >> $2
if($1 == "logEnd") exit


# log time elapsed from for compilation on screen
logTime:
	echo
	grep "Source compilation started on --- " $2
	grep "Source compilation ended on --- " $2
	echo 
if($1 == "logTime") exit



# remove a directory and recreate it
removeAndCreate:
	rm -rf   $2
	mkdir -p $2
if($1 == "removeAndCreate") exit

# get a package.
# $2 is package location
# $3 is filename
download:
	echo
	echo " > Downloading" $3"..."
	rm -f     $3
	$mwget $2/$3
	echo
if($1 == "download") exit


# get and unpack a package.
# $2 is package location
# $3 is filename
getAndUnpack:
	echo
	echo " > Downloading" $3"..."
	rm -f     $3
	$mwget $2/$3
	echo " > Unpacking" $3"..."
	tar -zxpf $3
	echo
if($1 == "getAndUnpack") exit

# get and unpack a package.
# $2 is package location
# $3 is filename
# $4 is destination directory
getAndUnpackTo:
	echo
	echo " > Downloading" $3"..."
	rm -f     $3
	$mwget $2/$3
	echo " > Unpacking" $3"..."
	tar -zxpf $3 --strip-components 1 -C $4
	echo
if($1 == "getAndUnpackTo") exit



# get and unpack a package.
# $2 is the package name
# $3 is the package version
installLog:
	echo " > Installing "$2" version "$3
if($1 == "installLog") exit






























