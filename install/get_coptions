#!/bin/csh -f


if($1 == "release"|| $1 == "copt" || $1 == "arch" || $1 == "log"  || $1 == "repo" || $1 == "dir" || $1 == "env" || $1 == "cmakev" ||  $1 == "logFile" || $1 == "logFileS" || $1 == "logStart" || $1 == "logEnd"  ||  $1 == "logTime" || $1 == "removeAndCreate" || $1 == "getAndUnpack" ||  $1 == "getAndUnpackTo" || $1 == "installLog") then
	goto $1
endif

# Additional environment
env:
	alias wget "wget --no-check-certificate"
if($1 == "env") exit


# Release
release:
	set release  = (`../ce/osrelease.pl`)
	# overwriting OSRELEASE if user want to
	if($OSRELEASE != $release) then
		set release = $OSRELEASE
	endif
	echo $release
if($1 == "release") exit


# Multithread compilation
copt:
	set opt   = ""
	set ncpu = `getconf _NPROCESSORS_ONLN`
	set opt = " -j"$ncpu" "

	# Temp: forcing max 10 processes as the scons system
	# checks independently that the libraries exist
	if($ncpu > 10) then
		set opt = " -j10"
	endif

	echo $opt
if($1 == "copt") exit


# 32 or 64 bit
arch:
set is_32bit = (`echo $OSRELEASE | grep -v x86_64 | grep 86 | wc | awk '{print $1}'`)
	if($is_32bit == "1") echo 32
	if($is_32bit == "0") echo 64
if($1 == "arch") exit

# Log to screen
log:
	echo
	echo " ### Package: "$2" ###"
	echo
	echo " > Version:                 " $3
	echo " > Filename:                " $4
	echo " > Release:                 " $5
	echo " > Architecture:            " $6
	echo " > Multithread Compilation: " $7
	echo
if($1 == "log") exit


# Web Directory where all the sources are located
repo:
	echo  "https://www.jlab.org/12gev_phys/packages/sources"
if($1 == "repo") exit


# JLAB FTP Directory where all the sources are located
dir:
	echo  "/u/group/12gev_phys/www/packages/sources"
if($1 == "dir") exit




# check the cmake version
# Issue warning if it's not >= 3.3
cmakev:
 	set cmake_major     = `cmake --version | head -1 | awk '{print $3}' | awk -F- '{print $1}' | awk -F. '{print $1}'`
 	set cmake_minor     = `cmake --version | head -1 | awk '{print $3}' | awk -F- '{print $1}' | awk -F. '{print $2}'`
 	if( ($cmake_major < 3) || ($cmake_major == 3 && $cmake_minor < 3)) then
		echo cmake version is $cmake_version, 3.3 or higher is needed
	else
		echo OK
	endif
if($1 == "cmakev") exit


# log file for each system
logFile:

	if($2 == "clhep")    echo "$CLHEP_BASE_DIR/build_log"
	if($2 == "xercesc")  echo "$XERCESCROOT/build_log"
	if($2 == "geant4")   echo "$G4INSTALL/build_log"
	if($2 == "ccdb")     echo "$CCDB_HOME/build_log"
	if($2 == "evio")     echo "$EVIO/build_log"
	if($2 == "mlibrary") echo "$MLIBRARY/build_log"
	if($2 == "gemc")     echo "$GEMC/build_log"
	if($2 == "root")     echo "$ROOTSYS/build_log"

if($1 == "logFile") exit


# log file for each system - with env variable as path
logFileS:

	if($2 == "clhep")    echo \$CLHEP_BASE_DIR/"build_log"
	if($2 == "xercesc")  echo \$XERCESCROOT/"build_log"
	if($2 == "geant4")   echo \$G4INSTALL/"build_log"
	if($2 == "ccdb")     echo \$CCDB_HOME/"build_log"
	if($2 == "evio")     echo \$EVIO/"build_log"
	if($2 == "mlibrary") echo \$MLIBRARY/"build_log"
	if($2 == "gemc")     echo \$GEMC/"build_log"
	if($2 == "root")     echo \$ROOTSYS/"build_log"

if($1 == "logFileS") exit


# log start message
logStart:
	echo " > Source compilation started on --- " `date` > $2
	echo " > Compiling source. Log will be in" $3
if($1 == "logStart") exit


# log end message
logEnd:
	echo " > Source compilation ended on --- " `date` >> $2
if($1 == "logEnd") exit


# log time elapsed from for compilation on screen
logTime:
	echo
	grep "Source compilation started on --- " $2
	grep "Source compilation ended on --- " $2
	echo
if($1 == "logTime") exit



# remove a directory and recreate it
removeAndCreate:
	rm -rf   $2
	mkdir -p $2
if($1 == "removeAndCreate") exit


# get and unpack a package.
# $2 is package location
# $3 is filename
getAndUnpack:
	echo
	echo " > Downloading" $3"..."
	rm -f      $3
	wget -q    $2/$3
	echo " > Unpacking" $3"..."
	tar -zxpf  $3
	echo
if($1 == "getAndUnpack") exit

# get and unpack a package.
# $2 is package location
# $3 is filename
# $4 is destination directory
getAndUnpackTo:
	echo
	echo " > Downloading" $3"..."
	rm -f      $3
	wget -q    $2/$3
	echo " > Unpacking" $3"..."
	tar -zxpf  $3 --strip-components 1 -C $4
	echo
if($1 == "getAndUnpackTo") exit



# get and unpack a package.
# $2 is the package name
# $3 is the package version
installLog:
	echo " > Installing "$2" version "$3
if($1 == "installLog") exit






























