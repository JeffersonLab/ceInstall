#!/bin/zsh

# if the environment variables CCDB_HOME and CCDB_VERSION are not set, exit
if [[ -z "$CCDB_HOME" || -z "$CCDB_VERSION" ]]; then
	echo "$red > CCDB_HOME or CCDB_VERSION environment variables are not set. Exiting.$reset"
	exit 1
fi

source "$(dirname "$(readlink -f "$0")")"/functions.zsh

what="ccdb"
srepo="https://github.com/baltzell/ccdb"
base_dir=$CCDB_HOME
source_dir=ccdb_source

log_general ccdb "$CCDB_VERSION" "$filename" "$base_dir"

git clone  --single-branch -b "v$CCDB_VERSION" "$srepo" $source_dir
cd $source_dir || exit
mkdir build
cd build || exit

if [[ "$OSTYPE" == "darwin"* ]]; then
	echo "macos, setting LDFLAGS to find zstd"
	export LDFLAGS="-L$(brew --prefix zstd)/lib -L$(brew --prefix openssl)/lib"
fi

cmake -DCMAKE_INSTALL_PREFIX=$base_dir ../
make -j "$n_cpu" install || exit
cd ../../ || exit
rm -rf $source_dir

# temp moving include dirs until gemc uses new paths
cd "$base_dir/include" || exit
mv ccdb tmp
mv tmp/* .
rm -rf tmp

echo "$magenta > $what installation completed.$reset"
echo
