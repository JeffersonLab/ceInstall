#!/bin/zsh -i

# -i: interactive mode. Needed to load modules

. "$(dirname "$(readlink -f "$0")")"/functions.zsh

if [[ $# -eq 1 ]]; then
	gemc_version=$1
else
	# error
	echo " > ERROR: No gemc version given. Exiting."
	exit 1
fi


echo " > gemc_version: $gemc_version"
echo


echo " > Checking missing modules in sim version $pv"
module unload sim
module unload gemc
module unload gemc3
module load	  gemc/$gemc_version

# if the above command fails, exit
if [[ $? -ne 0 ]]; then
	echo " > ERROR: module load gemc/$gemc_version failed. Exiting."
	exit 1
fi
echo

[ "$(moduleTestResult .clhep     $CLHEP_VERSION )"    -eq 0 ] && echo " > clhep is installed"    || install_clhep
[ "$(moduleTestResult .xercesc   $XERCESC_VERSION )"  -eq 0 ] && echo " > xercesc is installed"  || install_xercesc
[ "$(moduleTestResult .qt        $QT_VERSION)"        -eq 0 ] && echo " > qt is installed"       || copy_qt
[ "$(moduleTestResult .g4data    $G4_VERSION)"        -eq 0 ] && echo " > g4data is installed"   || install_geant4_data
[ "$(moduleTestResult .geant4    $G4_VERSION)"        -eq 0 ] && echo " > geant4 is installed"   || install_geant4
[ "$(moduleTestResult .scons_bm  $SCONS_BM_VERSION)"  -eq 0 ] && echo " > scons_bm is installed" || install_scons_bm
[ "$(moduleTestResult .ccdb      $CCDB_VERSION)"      -eq 0 ] && echo " > ccdb is installed"     || install_ccdb
[ "$(moduleTestResult .evio      $EVIO_VERSION)"      -eq 0 ] && echo " > evio is installed"     || install_evio
[ "$(moduleTestResult .hipo      $HIPO_VERSION)"      -eq 0 ] && echo " > hipo is installed"     || install_hipo
[ "$(moduleTestResult .cmag      $CMAG_VERSION)"      -eq 0 ] && echo " > cmag is installed"     || install_cmag
[ "$(moduleTestResult .mlibrary  $MLIBRARY_VERSION)"  -eq 0 ] && echo " > mlibrary is installed" || install_mlibrary


# if major version of GEMC_VERSION is 2, install_gemc2, install_clas12Tag
if [[ $gemc_version == 2* ]]; then
	[ "$(moduleTestResult gemc $gemc_version)" -eq 0 ] && echo " > gemc2 is installed"     || install_g2
else
	[ "$(moduleTestResult gemc $gemc_version)" -eq 0 ] && echo " > clas12Tag is installed" || install_clas12Tag
fi

# if $BANKS_VERSION exists, test/install banks
if [[ -n "$BANKS_VERSION" ]]; then
	[ "$(moduleTestResult .banks     $BANKS_VERSION)"     -eq 0 ] && echo " > banks is installed"    || install_banks
fi

echo
module test gemc/$gemc_version

echo
