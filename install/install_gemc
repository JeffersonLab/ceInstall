#!/bin/zsh -i
# shell has to be interactive to load modules

# on fedora and ubuntu installation dir is different for modules
# also checking for container env setup in /app
[[ -f /usr/share/Modules/init/zsh ]] && . /usr/share/Modules/init/zsh
[[ -f /usr/share/modules/init/zsh ]] && . /usr/share/modules/init/zsh
[[ -f /app/localSetup.sh ]]          && . /app/localSetup.sh

. "$(dirname "$(readlink -f "$0")")"/functions.zsh

if [[ $# -eq 1 ]]; then
	gemc_version=$1
else
	# error
	echo " > ERROR: No gemc version given. Exiting."
	exit 1
fi

echo " > gemc_version: $gemc_version"
echo

module purge
module load sim_system
module unload gemc
module load gemc/$gemc_version
if [[ $? -ne 0 ]]; then
	echo " > ERROR: module load gemc/$gemc_version failed. Probably $gemc_version is not supported. Exiting."
	exit 1
fi
echo
echo
echo " > Checking / Installing missing dependencies for gemc version $gemc_version"
[ "$(moduleTestResult     geant4    $G4_VERSION)"       -eq 0 ] && echo " > geant4 is installed"    || install_geant4
[ "$(moduleTestResult     .scons_bm $SCONS_BM_VERSION)" -eq 0 ] && echo " > scons_bm is installed"  || install_scons_bm
[ "$(moduleTestResult     ccdb      $CCDB_VERSION)"     -eq 0 ] && echo " > ccdb is installed"      || install_ccdb
if [[ $gemc_version == 2* ]] || [[ $gemc_version == 4* ]]; then
	[ "$(moduleTestResult .evio $EVIO_VERSION)"       -eq 0 ] && echo " > evio is installed"      || install_evio
fi
if [[ $gemc_version == 2* ]] || [[ $gemc_version == 5* ]]; then
	[ "$(moduleTestResult hipo $HIPO_VERSION)"        -eq 0 ] && echo " > hipo is installed"      || install_hipo
	[ "$(moduleTestResult .cmag $CMAG_VERSION)"       -eq 0 ] && echo " > cmag is installed"      || install_cmag
fi
[ "$(moduleTestResult     .mlibrary $MLIBRARY_VERSION)" -eq 0 ] && echo " > mlibrary is installed"  || install_mlibrary
[ "$(moduleTestResult     gemc      $gemc_version)"     -eq 0 ] && echo " > gemc is installed"      || install_gemc_source $gemc_version

# if major version of GEMC_VERSION is 2, install_gemc2, install_clas12Tag
#if [[ $gemc_version == 2* ]]; then
#else
#
#	[ "$(moduleTestResult gemc $gemc_version)" -eq 0 ] && echo " > clas12Tag is installed" || install_clas12Tag
#	# if the file $FIELD_DIR/Full_torus_r251_phi181_z251_25Jan2021.dat does not exist, run install_fields
#	if [[ ! -f "$FIELD_DIR/Full_torus_r251_phi181_z251_25Jan2021.dat" ]]; then
#		echo " > Field map does not exist. Installing field map."
#		install_fields
#	else
#		echo " > Field maps are installed."
#	fi
#fi

# if $BANKS_VERSION exists (gemc2), test/install banks
#if [[ -n "$BANKS_VERSION" ]]; then
#	[ "$(moduleTestResult .banks $BANKS_VERSION)" -eq 0 ] && echo " > banks is installed" || install_banks
#fi

# test for library existence
# notice module gemc must be loaded
#echo
#echo SIM and GEMC Tests:
#echo
#[ -f "$CLHEP_BASE_DIR/lib/libCLHEP.a" ] && echo "CLHEP $CLHEP_BASE_DIR/lib/libCLHEP.a found" || whine_and_quit "$CLHEP_BASE_DIR/lib/libCLHEP.a not found"
#[ -f "$XERCESCROOT/bin/CreateDOMDocument" ] && echo "XERCESC $XERCESCROOT/bin/CreateDOMDocument found" || whine_and_quit "$XERCESCROOT/bin/CreateDOMDocument not found"
#[ -d "$QTDIR/lib" ] && echo "QT $QTDIR/lib found" || whine_and_quit "$QTDIR/lib not found"
#[ -d "$G4LEDATA" ] && echo "GEANT4 $G4LEDATA Data found" || whine_and_quit "$G4LEDATA not found"
## not sure why when this is run for the first time, or in autobuild, the G4LIB is not set to lib64 but to lib
#if [[ -d "$G4LIB" ]]; then
#	echo "Geant4: $G4LIB found"
#else
#	newG4LIB=$(echo $G4LIB | sed 's/lib/lib64/')
#	[ -d "$newG4LIB" ] && echo "Geant4: $newG4LIB found" || whine_and_quit "$newG4LIB or $G4LIB not found"
#fi
#
#[ -f "$SCONS_BM/init_env.py" ] && echo "SCONS $SCONS_BM/init_env.py found" || whine_and_quit "$SCONS_BM/init_env.py not found"
#[ -f "$CCDB_HOME/lib/libccdb.a" ] && echo "CCDB $CCDB_HOME/lib/libccdb.a found" || whine_and_quit "$CCDB_HOME/lib/libccdb.a not found"
#[ -f "$MLIBRARY/lib/libgoptions.a" ] && echo "MLIBRARY $MLIBRARY/lib/libgoptions.a found" || whine_and_quit "$MLIBRARY/lib/libgoptions.a not found"
#cad=$(find "$MLIBRARY/lib" -name 'libcadmesh*' | wc -l)
#(($cad == 1)) && echo "CADMESH found" || whine_and_quit "CADMESH not found"
#[ -f "$GEMC/gemc" ] && echo "GEMC $GEMC/gemc found" || whine_and_quit "$GEMC/gemc not found"
#echo
