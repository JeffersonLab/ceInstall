#%Module######################

conflict physlibs

set PHYS_VERSION $env(PHYS_VERSION)

if { ! [info exist ::env(PHYS_SUB_DIR)]  }  {
  setenv PHYS_SUB_DIR sim
}

# example of adding software to a specific release
# In the ModulesHelp below one can just add
#    global newlib_version_log
#    $newlib_version_log
# if { [info exist ::newlib_version ]  }  {
#    set newlib_version_log "- newlib_version: $newlib_version"
#   } else {
#    set newlib_version_log ""
#}


proc ModulesHelp { } {
    global PHYS_VERSION
    global clhep_version
    global xercesc_version
    global qt_version
    global geant4_version
    global g4data_version
    global scons_bm_version
    global ccdb_version
    global evio_version
    global hipo_version
    global mlibrary_version
    global gemc_version
    global root_version
    global banks_version
    global glibrary_version
    global scig_version
    global clas12_systems_version

   puts stderr "
   physlibs $PHYS_VERSION loads the following modules:\n
   - clhep          $clhep_version
   - xercesc        $xercesc_version
   - qt             $qt_version
   - geant4         $geant4_version
   - scons_bm       $scons_bm_version
   - ccdb           $ccdb_version
   - evio           $evio_version
   - hipo           $hipo_version
   - mlibrary       $mlibrary_version
   - gemc           $gemc_version
   - root           $root_version
   - banks          $banks_version
   - glibrary       $glibrary_version
   - scig           $scig_version
   - clas12_systems $clas12_systems_version

"
}


module-whatis \
"\n
          clhep/${clhep_version}       \t xercesc/${xercesc_version} \t\t qt/${qt_version}      \t geant4/${geant4_version}
          scons_bm/${scons_bm_version} \t ccdb/${ccdb_version}       \t evio/${evio_version}    \t\t hipo/${hipo_version}
          mlibrary/${mlibrary_version} \t\t gemc/${gemc_version}     \t\t root/${root_version}  \t\t banks/${banks_version}
          glibrary/${glibrary_version} \t\t scig/${scig_version}     \t\t clas12_systems/${clas12_systems_version}
"


module load .clhep/${clhep_version}
module load .ccdb/${ccdb_version}
module load .xercesc/${xercesc_version}
module load .qt/${qt_version}
module load .geant4/${geant4_version}

proc ModulesTest { } {
    global PHYS_VERSION
    global clhep_version

    set retcode 1  ; # default: 1 meaning PASS

    puts stderr "Running ModulesTest for PHYS_VERSION $PHYS_VERSION..."

    set retcode [ module test .clhep/${clhep_version} ]

    return $retcode
}