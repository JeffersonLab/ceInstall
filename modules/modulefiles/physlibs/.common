#%Module######################

conflict physlibs

set PHYS_VERSION $env(PHYS_VERSION)

if { ! [info exist ::env(PHYS_HOME)]  }  {
  setenv PHYS_HOME $env(HOME)
}

if { ! [info exist ::env(PHYS_SUB_DIR)]  }  {
  setenv PHYS_SUB_DIR sim
}

if { [info exist ::glibrary_version ]  }  {
    set glibrary_version_log "- glibrary_version: $glibrary_version"
   } else {
    set glibrary_version_log ""
}

if { [info exist ::scig_version ]  }  {
    set scig_version_log "- scig_version: $scig_version"
   } else {
    set scig_version_log ""
}

if { [info exist ::clas12_systems ]  }  {
    set clas12_systems_log "- clas12_systems: $clas12_systems"
   } else {
    set clas12_systems_log ""
}




proc ModulesHelp { } {
    global PHYS_VERSION
    global clhep_version
    global xercesc_version
    global qt_version
    global geant4_version
    global g4data_version
    global scons_bm_version
    global ccdb_version
    global evio_version
    global hipo_version
    global mlibrary_version
    global gemc_version
    global root_version
    global banks_version
    global glibrary_version_log
    global scig_version_log
    global clas12_systems_log



   puts stderr "
   physlibs $PHYS_VERSION loads the following modules:\n
   - clhep $clhep_version
   - xercesc $xercesc_version
   - qt $qt_version
   - geant4 $geant4_version
   - scons_bm $scons_bm_version
   - ccdb $ccdb_version
   - evio $evio_version
   - hipo $hipo_version
   - mlibrary $mlibrary_version
   - gemc $gemc_version
   - root $root_version
   - banks $banks_version
   $glibrary_version_log
   $scig_version_log
   $clas12_systems_log
"
}


module-whatis \
"\n
          clhep/${clhep_version} \t xercesc/${xercesc_version} \t qt/${qt_version} \t geant4/${geant4_version}
          scons_bm/${scons_bm_version} \t ccdb/${ccdb_version} \t evio/${evio_version} \t hipo/${hipo_version}
          mlibrary/${mlibrary_version} \t gemc/${gemc_version} \t root/${root_version}
"

module load .clhep/${clhep_version}
module load .ccdb/${ccdb_version}
module load .xercesc/${xercesc_version}
module load .qt/${qt_version}
module load .geant4/${geant4_version}



proc ModulesTest { } {
    global PHYS_VERSION

    set retcode 1  ; # default: 1 meaning PASS

    puts stderr "Running ModulesTest for PHYS_VERSION $PHYS_VERSION..."

    # loop over all the modules that are loaded

   set grouplist ( XERCESCROOTA CLHEP_BASE_DIR )

    foreach mod $grouplist  {
        puts stderr "Testing module $mod..."
        if { [file isdirectory [getenv $mod]] } {
            puts stderr "Success: $mod is a directory"
         } else {
            puts stderr "ERROR: $mod Is not a directory"
            set retcode 0
        }
    }


    puts stderr "\nRunning ModulesTest for directory existence...done"





    return $retcode
}