#!/bin/tcsh -f

# First argument is package name
# Second argument is version

if($1 == "g4data") then
	goto $1
endif

if($#argv != 2 && $#argv != 3) then
	echo " "
	echo "Usage:   "
	echo  "  >> go_tar package version [option]"
	echo " "
	exit 0
endif


set pname   = $1
set pver    = $2
set option  = $3
set remoted = "ftp.jlab.org:/u/group/12gev_phys/www/packages/sources"
set locald  = /opt/projects


echo
echo " Package: " $pname ", version: " $pver
echo


# common environment
if($pname == "ceInstall") then

	# to use local disk version for a release
	if($option == "local") then
		cd $locald
		rm -f ceInstall_$pver.*
		tar cvf ceInstall_$pver.tar  -L --exclude='go_tar' --exclude="doc" --exclude=".DS_Store" --exclude="releases.key" --exclude=".sconsign.dblite" --exclude=".git" ceInstall
		gzip ceInstall_$pver.tar
		scp ceInstall_$pver.tar.gz $remoted/ceInstall
		rm -f ceInstall_$pver.*
	else
		rm -rf   $locald/ceInstall/tmp
		mkdir -p $locald/ceInstall/tmp/
		cd       $locald/ceInstall/tmp/
		wget https://github.com/JeffersonLab/ceInstall/archive/v$pver".tar.gz" -O ceInstall_$pver.tar.gz
		scp ceInstall_$pver.tar.gz $remoted/ceInstall
		cd ..
		rm -rf tmp
	endif

	cd $locald/ceInstall

	# html instructions: these are the ones in the local dir, not coming from the git release
	rm sbsInstall/$pver"_install.html"
	sed "s/vvversiontoreplaceee/$pver/g" sbsInstall/template_install.html > sbsInstall/$pver"_install.html"
	scp sbsInstall/* $remoted/ceInstall/

	# main scripts: these are the ones in the local dir, not coming from the git release
	scp softenv.* ftp.jlab.org:/site/12gev_phys

	exit
endif


# scons scripts
if($pname == "bm") then
	# to use local disk version for a release
	if($option == "local") then
		cd $locald
		rm -f scons_bm_$pver.tar.gz
		tar cvf scons_bm_$pver.tar  -L --exclude='go_tar' --exclude="doc" --exclude=".DS_Store" --exclude="releases.key" --exclude=".sconsign.dblite" --exclude=".git" scons_bm
		gzip scons_bm_$pver.tar
		scp scons_bm_$pver.tar.gz $remoted/scons_bm
		rm -f scons_bm_$pver.tar.gz
	else
		rm -rf   $locald/scons_bm/tmp
		mkdir -p $locald/scons_bm/tmp/
		cd       $locald/scons_bm/tmp/

		wget https://github.com/maureeungaro/scons_bm/archive/v$pver".tar.gz" -O scons_bm_$pver.tar.gz
		scp scons_bm_$pver.tar.gz $remoted/scons_bm
		cd ..
		rm -rf tmp
	endif
	exit
endif


# Additional settings at the top of get_coptions
# Get evio from here:
# https://coda.jlab.org/drupal/content/event-io-evio
# then replace the SConstruct there with the old $EVIO/SConstruct and re-pack with (one dir up)
if($pname == "evio") then
	cd $JLAB_SOFTWARE/evio/$pver
	scons -c ; rm -rf lib bin
	cd ..
	rm -rf evio-$pver.*
	tar cvf  evio-$pver.tar --exclude="doc" --exclude="java" --exclude="tar" $pver/*
	gzip evio-$pver.tar
	scp evio-$pver.tar.gz $remoted/evio
	exit
endif

# gemc
# copying API in gemc
if($pname == "gemc") then
	if($pver == "devel") then
		cd $GEMC
		scons -c
		cd $locald/gemc/releases/
		rm -rf devel ; cp -r ../source devel
	endif
	cd $locald/gemc/releases/$pver
	scons -c ;
	cp -r $locald/gemc/api .
	cd $locald/gemc/releases
	rm -rf gemc-$pver.*
	tar cvf gemc-$pver.tar  --exclude=".DS_Store"  --exclude=".gitignore" --exclude=".sconsign.dblite" --exclude=".git" --exclude=".entitlements" --exclude="lib" $pver
	gzip gemc-$pver.tar
	scp gemc-$pver.tar.gz $remoted/gemc
	rm -rf $locald/gemc/releases/$pver/api
	exit
endif

# banks
if($pname == "banks") then
	rm -rf   $locald/banks/tmp
	mkdir -p $locald/banks/tmp/
	cd       $locald/banks/tmp/

	wget https://github.com/maureeungaro/banks/archive/v$pver".tar.gz" -O banks_$pver.tar.gz
	scp banks_$pver.tar.gz $remoted/banks
	cd ..
	rm -rf tmp
	exit
endif


# mlibrary
if($pname == "mlibrary") then

	# to use development for next release
	# extra check that we're using the latest release
	if($option == "local") then
		cd $locald/mlibrary
		scons -c
		rm -rf cadmeshBuild bin lib
		cd $locald
		rm -f mlibrary_$pver.*
		tar cvf mlibrary_$pver.tar  -L --exclude='go_tar' --exclude='external'  --exclude="doc" --exclude=".DS_Store" --exclude="releases.key" --exclude=".sconsign.dblite" --exclude=".git" mlibrary
		gzip mlibrary_$pver.tar
		scp mlibrary_$pver.tar.gz $remoted/mlibrary
		rm -f mlibrary_$pver.*
	else
		rm -rf   $locald/mlibrary/tmp
		mkdir -p $locald/mlibrary/tmp/
		cd       $locald/mlibrary/tmp/

		wget https://github.com/gemc/mlibrary/archive/v$pver".tar.gz" -O mlibrary_$pver.tar.gz
		scp mlibrary_$pver.tar.gz $remoted/mlibrary
		cd ..
		rm -rf tmp
	endif
	exit

endif

echo
echo
exit

g4data:
	# data is downloaded to Downloads from the geant4 downloads.
	# make sure to move it to the a tmp dir inside download
	# make sure it is not unzipped
	cd /Users/ungaro/Downloads/tmp

	# checking number of files
	set nFiles = `\ls | wc | awk '{print $1}'`
	if($nFiles != "10") then
		echo
		echo Error: we should have 10 files but we have $nFiles
		echo
	endif

	set G4DATAVERSION = 4.10.04.p01
	set REMOTEDIR      = /u/group/12gev_phys/www/packages/sources/geant4_data/

	cd /Users/ungaro/Downloads
	mv tmp $G4DATAVERSION
	scp -r $G4DATAVERSION ftp:$REMOTEDIR
if($1 == "g4data") exit



